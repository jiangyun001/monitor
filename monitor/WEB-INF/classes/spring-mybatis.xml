<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"  
 	 	 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"  
         xmlns:aop="http://www.springframework.org/schema/aop" xmlns:p="http://www.springframework.org/schema/p"  
    	 xmlns:tx="http://www.springframework.org/schema/tx"  
         xsi:schemaLocation="http://www.springframework.org/schema/beans  
         http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
         http://www.springframework.org/schema/tx  
         http://www.springframework.org/schema/tx/spring-tx.xsd  
         http://www.springframework.org/schema/aop  
         http://www.springframework.org/schema/aop/spring-aop-3.0.xsd  
         http://www.springframework.org/schema/context  
         http://www.springframework.org/schema/context/spring-context-3.0.xsd">  
	<!--自动扫描-->
	<context:component-scan base-package="monitor"/>
	<!--引入配置文件-->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:jdbc.properties"/>
	</bean>

	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${driver}"/>
		<property name="url" value="${url}"/>
		<property name="username" value="${username}"/>
		<property name="password" value="${password}"/>
		<!--初始化连接大小-->
		<property name="initialSize" value="${initialSize}"></property>
		<!--连接池最大数量-->
		<property name="maxActive" value="${maxActive}"></property>
		<!--连接池最大空闲-->
		<property name="maxIdle" value="${maxIdle}"></property>
		<!--连接池最小空闲-->
		<property name="minIdle" value="${minIdle}"></property>
		<!--获取连接最大等待时间-->
		<property name="maxWait" value="${maxWait}"></property>
	</bean>
	<!--spring和MyBatis完美整合，不需要mybatis的配置映射文件-->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<!--自动扫描mapping.xml文件-->
		<property name="mapperLocations" value="classpath:monitor/mapping/*/*.xml"></property>
	</bean>
	<bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <!-- 线程池维护线程的最少数量 -->
        <property name="corePoolSize" value="1" />
        <!-- 允许的空闲时间 -->
        <property name="keepAliveSeconds" value="200" />
        <!-- 线程池维护线程的最大数量 -->
        <property name="maxPoolSize" value="5" />
        <!-- 缓存队列 -->
        <property name="queueCapacity" value="40" />
        <!-- 对拒绝task的处理策略 -->
        <property name="rejectedExecutionHandler">
            <bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy" />
        </property>
    </bean>
	<!--DAO接口所在包名，Spring会自动查找其下的类-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="monitor"/>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>

	<!--(事务管理)transactionmanager,useJtaTransactionManagerforglobaltx-->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
    </bean>
	<tx:advice id="userTxAdvice" transaction-manager="transactionManager">  
	  <tx:attributes>  
	      <tx:method name="delete*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" no-rollback-for="java.lang.RuntimeException"/>  
	      <tx:method name="add*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />  
	      <tx:method name="insert*" propagation="REQUIRED" isolation="SERIALIZABLE" read-only="false" rollback-for="java.lang.Exception" />  
	      <tx:method name="update*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />  
	      <tx:method name="modify*" propagation="REQUIRES_NEW" read-only="false" rollback-for="java.lang.Exception" />  
	      <tx:method name="find*" propagation="SUPPORTS"/>  
	      <tx:method name="get*" propagation="SUPPORTS" isolation="SERIALIZABLE"/>  
	      <tx:method name="select*" propagation="REQUIRED" isolation="SERIALIZABLE"/>  
	  </tx:attributes>  
	</tx:advice>  
	<aop:config>
	    <aop:pointcut id="pc" expression="execution( * monitor.service..*.*(..))" /> <!-- 把事务控制在Service层 -->  
	    <aop:advisor pointcut-ref="pc" advice-ref="userTxAdvice" />  
	</aop:config>  
</beans>
